/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/health": {
    get: operations["HealthController_healthCheck"];
  };
  "/metrics": {
    get: operations["PrometheusController_index"];
  };
  "/pawns": {
    get: operations["PawnController_listPawns"];
  };
  "/pawns/on-case": {
    post: operations["PawnController_getPawnOnCoordinatesXY"];
  };
  "/pawns/{name}": {
    post: operations["PawnController_getPawnByName"];
  };
  "/rounds/launch-dice": {
    post: operations["RoundController_launchDice"];
  };
  "/rounds/what-can-i-play": {
    post: operations["RoundController_whatCanIPlay"];
  };
  "/rounds/player-commits-move": {
    post: operations["RoundController_commitMove"];
  };
  "/games": {
    get: operations["GameController_listGames"];
    post: operations["GameController_createGame"];
  };
  "/games/create": {
    post: operations["GameController_registerPlayer"];
  };
  "/games/{name}": {
    get: operations["GameController_getGameByName"];
  };
  "/games/color": {
    patch: operations["GameController_selectColor"];
  };
  "/games/join": {
    post: operations["GameController_joinGame"];
  };
  "/games/leave": {
    post: operations["GameController_leaveGame"];
  };
  "/games/start": {
    post: operations["GameController_startGame"];
  };
  "/players/{name}": {
    get: operations["PlayerController_getPlayerByName"];
  };
  "/players/register": {
    post: operations["PlayerController_registerPlayer"];
  };
  "/messages": {
    post: operations["MessageController_sendMessage"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    ExternalPawn: {
      /**
       * @description Uniq identifiant of the game
       * @example 6e686e86-912c-41f7-9916-697ce357394e
       */
      gameId: string;
      /**
       * @description Uniq identifiant of the pawn
       * @example 8426fdca-3031-4eb0-ae15-a8c5f187efda
       */
      id: string;
      /**
       * @description Uniq identifiant of the player which own the pawn
       * @example a7f8d95e-f63c-4f69-8b02-94b9349d9286
       */
      playerId: string;
    };
    ExternalRound: {
      /**
       * @description The age of the Cat
       * @example 1
       */
      diceLaunchedAt: Record<string, never>;
    };
    ContextInput: Record<string, never>;
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  HealthController_healthCheck: {
    responses: {
      /** @description The Health Check is successful */
      200: {
        content: {
          "application/json": {
            /** @example ok */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /** @example {} */
            error?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            };
          };
        };
      };
      /** @description The Health Check is not successful */
      503: {
        content: {
          "application/json": {
            /** @example error */
            status?: string;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   }
             * }
             */
            info?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            error?: ({
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            }) | null;
            /**
             * @example {
             *   "database": {
             *     "status": "up"
             *   },
             *   "redis": {
             *     "status": "down",
             *     "message": "Could not connect"
             *   }
             * }
             */
            details?: {
              [key: string]: {
                status?: string;
                [key: string]: string | undefined;
              };
            };
          };
        };
      };
    };
  };
  PrometheusController_index: {
    responses: {
      200: {
        content: never;
      };
    };
  };
  PawnController_listPawns: {
    responses: {
      /** @description The round created following the launch of the dice */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalPawn"];
        };
      };
    };
  };
  PawnController_getPawnOnCoordinatesXY: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  PawnController_getPawnByName: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  RoundController_launchDice: {
    responses: {
      /** @description The round created following the launch of the dice */
      200: {
        content: {
          "application/json": components["schemas"]["ExternalRound"];
        };
      };
    };
  };
  RoundController_whatCanIPlay: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  RoundController_commitMove: {
    responses: {
      201: {
        content: never;
      };
    };
  };
  GameController_listGames: {
    responses: {
      /** @description Get all opened games */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  GameController_createGame: {
    requestBody: {
      content: {
        "application/json": {
          name?: string;
        };
      };
    };
    responses: {
      /** @description A game has been created */
      200: {
        content: {
          "application/json": {
            id: string;
          };
        };
      };
    };
  };
  GameController_registerPlayer: {
    requestBody: {
      content: {
        "application/json": {
          nickname?: string;
        };
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example ceba6c82-d13a-4b9a-aeb3-e1ca41a7cdb0 */
            id: string;
            /** @example 9b515ac8-2117-48c7-a815-6802e40b8916 */
            nickname: string;
          };
        };
      };
    };
  };
  GameController_getGameByName: {
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example bf2cc75c-c745-40a2-bbcd-0661f2ca5dac */
            id: string;
            /** @example game1 */
            name: string;
            playerColors?: Record<string, never>;
            players?: unknown[];
            startedAt?: Record<string, never>;
          };
        };
      };
    };
  };
  GameController_selectColor: {
    /** @description dz */
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInput"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /**
             * @description returns true if the color has correctly been registered for this player
             * @example true
             */
            valid: boolean;
          };
        };
      };
    };
  };
  GameController_joinGame: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInput"];
      };
    };
    responses: {
      /** @description Join a game */
      200: {
        content: {
          "application/json": unknown;
        };
      };
    };
  };
  GameController_leaveGame: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInput"];
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  GameController_startGame: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ContextInput"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  PlayerController_getPlayerByName: {
    parameters: {
      path: {
        name: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example 0c4ba747-f599-48da-b82d-a2a7ad3d581d */
            id: string;
            nickname?: string;
            /** @example 47c9d854-98e6-4de9-80ac-5a9b004c6229 */
            gameId?: string;
          };
        };
      };
    };
  };
  PlayerController_registerPlayer: {
    responses: {
      200: {
        content: {
          "application/json": {
            /** @example e818609e-10c5-4f57-9fb3-9982230c7369 */
            id: string;
            /** @example 85e0a814-a392-42b8-b6f3-12162006213b */
            nickname: string;
          };
        };
      };
    };
  };
  MessageController_sendMessage: {
    responses: {
      /** @description Message has been sent */
      default: {
        content: never;
      };
    };
  };
}
